import asyncio

import sys
from os import getenv

from aiogram.client.session.aiohttp import AiohttpSession

from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import User, Message, ContentType
from aiogram.utils.markdown import hbold
from aiogram.types import FSInputFile
from aiogram import F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import InputFile

from excel_manager import ExcelManager
import re

from aiogram.filters import Command
from aiogram.filters import Command, CommandObject, CommandStart
from commands import set_default_commands

from aiogram.filters.callback_data import CallbackData


from datetime import datetime, timedelta

import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from datetime import datetime
from typing import Callable, Any, Optional


from aiogram.handlers import MessageHandler, CallbackQueryHandler

from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback, get_user_locale
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters.state import StateFilter
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback, get_user_locale


dp = Dispatcher()
file_name = "DATA_BASE.xlsx"



def get_user_link(user: User) -> str:
    if user.username:
        return f"https://t.me/{user.username}"
    else:
        return f"tg://user?id={user.id}"




#admin_id = [541020016, 1832033163]

admin_id = [541020016, 2081737934]


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:

    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
    )

    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.full_name}</b> –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", reply_markup=builder.as_markup(resize_keyboard=True), parse_mode="html")
    print(f"{message.from_user.full_name} –Ω–∞–∂–∞–ª start")

#@dp.message(F.photo)
#async def photo_handler(message: Message) -> None:
#    photo_data = message.photo[-1]
#    await message.answer(f"{photos_data}")


#–¥–ª—è –∫–æ–ª–ª–±–µ–∫–∞
class OrderSupState(StatesGroup):
    waiting_for_additional_info = State()



@dp.message(lambda message: message.content_type == ContentType.CONTACT)
async def contact_handler(message: Message) -> None:

    contact = message.contact
    user_phone_number = contact.phone_number

    user_link = get_user_link(message.from_user)

    excel_manager = ExcelManager(file_name)
    excel_manager.create_or_update_workbook(message.from_user.id, strip_html_tags(hbold(message.from_user.full_name)), user_link, user_phone_number)

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        callback_data="choose_sup")
    )

    builder_2 = types.ReplyKeyboardRemove()  # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —ç–∫—Ä–∞–Ω–∞
    await message.answer("–°–ø–∞—Å–∏–±–æ! —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", reply_markup=builder_2)

    await message.answer(f"‚ùóÔ∏è–°–ê–ü–´ –í–´–î–ê–Æ–¢–°–Ø –ü–û –î–û–ì–û–í–û–†–£ –ê–†–ï–ù–î–´‚ùóÔ∏è\n–ó–∞–ª–æ–≥ - 5000—Ä.üëåüèº –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∑—è—Ç—ã—Ö —Å–∞–ø–æ–≤ –≤ –∞—Ä–µ–Ω–¥—É ( –ª–∏–±–æ –ø–∞—Å–ø–æ—Ä—Ç –†–§)\nüõë–ó–ê –£–¢–ï–†–Æ –ö–û–ú–ü–õ–ï–ö–¢–ê, –ó–ê–î–ï–†–ñ–ö–£ –ê–†–ï–ù–î–´ –ò –°–î–ê–ß–£ –°–ê–ü –î–û–°–û–ö –í –ù–ï–ü–û–¢–†–ï–ë–ù–û–ú –í–ò–î–ï –ü–†–ï–î–£–°–ú–û–¢–†–ï–ù –®–¢–†–ê–§üõë", reply_markup=builder.as_markup(resize_keyboard=True))

@dp.callback_query(F.data == "choose_sup")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    excel_manager = ExcelManager(file_name)
    mark = excel_manager.get_sups()

    #await callback.message.answer(f"{mark}")

    media = [types.InputMediaPhoto(media=item['url']) for item in mark]

    builder = InlineKeyboardBuilder()

    count = 0
    row = []

    for item in mark:
        row.append(types.InlineKeyboardButton(text=item['name'], callback_data=f"sup_{item['id']}"))
        count += 1
        if count == 2:
            builder.row(*row)
            row = []
            count = 0

    if row:
        builder.row(*row)

    await callback.message.answer_media_group(media=media)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=builder.as_markup(resize_keyboard=True))


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#class OrderSupState(StatesGroup):
#    waiting_for_additional_info = State()
#    waiting_for_confirmation = State()
#    waiting_for_payment_screenshot = State()

class OrderSupState(StatesGroup):
    waiting_for_start_date = State()
    waiting_for_end_date = State()
    waiting_for_confirmation = State()
    waiting_for_payment_screenshot = State()
    waiting_for_payment_screenshot = State()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
def is_valid_date(date_text):
    try:
        datetime.strptime(date_text, '%H:%M %d.%m')
        return True
    except ValueError:
        return False


def is_valid_day_month(date_text):
    try:
        datetime.strptime(date_text, '%d.%m')
        return True
    except ValueError:
        return False

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
days_of_week = {
    0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    1: '–≤—Ç–æ—Ä–Ω–∏–∫',
    2: '—Å—Ä–µ–¥—É',
    3: '—á–µ—Ç–≤–µ—Ä–≥',
    4: '–ø—è—Ç–Ω–∏—Ü—É',
    5: '—Å—É–±–±–æ—Ç—É',
    6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
def calculate_rent_cost(date_from_str, date_to_str=None):
    cost_per_hour = 300
    cost_per_weekday = 1000
    cost_per_weekend_evening = 1300
    cost_per_weekend = 3000
    cost_per_week = 5900

    current_year = datetime.now().year

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    if len(date_from_str) == 5:  # –§–æ—Ä–º–∞—Ç: DD.MM
        date_from = datetime.strptime(date_from_str, '%d.%m')
        date_from = date_from.replace(year=current_year)
    elif len(date_from_str) == 10:  # –§–æ—Ä–º–∞—Ç: DD.MM.YYYY
        date_from = datetime.strptime(date_from_str, '%d.%m.%Y')
    else:  # –§–æ—Ä–º–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º: HH:MM DD.MM –∏–ª–∏ HH:MM DD.MM.YYYY
        try:
            date_from = datetime.strptime(date_from_str, '%H:%M %d.%m.%Y')
        except ValueError:
            date_from = datetime.strptime(date_from_str, '%H:%M %d.%m')
            date_from = date_from.replace(year=current_year)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    if date_to_str:
        if len(date_to_str) == 5:  # –§–æ—Ä–º–∞—Ç: DD.MM
            date_to = datetime.strptime(date_to_str, '%d.%m')
            date_to = date_to.replace(year=current_year)
        elif len(date_to_str) == 10:  # –§–æ—Ä–º–∞—Ç: DD.MM.YYYY
            date_to = datetime.strptime(date_to_str, '%d.%m.%Y')
        else:  # –§–æ—Ä–º–∞—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º: HH:MM DD.MM –∏–ª–∏ HH:MM DD.MM.YYYY
            try:
                date_to = datetime.strptime(date_to_str, '%H:%M %d.%m.%Y')
            except ValueError:
                date_to = datetime.strptime(date_to_str, '%H:%M %d.%m')
                date_to = date_to.replace(year=current_year)
    else:
        date_to = date_from

    if date_from > date_to:
        return 0, []

    if date_from == date_to:
        if date_from.weekday() < 5:  # –ë—É–¥–Ω–∏–π –¥–µ–Ω—å
            return cost_per_weekday, [f"–î–æ–±–∞–≤–ª–µ–Ω–æ {cost_per_weekday} —Ä—É–±. –∑–∞ –±—É–¥–Ω–∏–π –¥–µ–Ω—å {days_of_week[date_from.weekday()]} {date_from.date()}"]
        else:  # –°—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
            return cost_per_weekend, [f"–î–æ–±–∞–≤–ª–µ–Ω–æ {cost_per_weekend} —Ä—É–±. –∑–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å {days_of_week[date_from.weekday()]} {date_from.date()}"]

    if (date_to - date_from).days == 6:
        return cost_per_week, [f"–î–æ–±–∞–≤–ª–µ–Ω–æ {cost_per_week} —Ä—É–±. –∑–∞ –Ω–µ–¥–µ–ª—å–Ω—É—é –∞—Ä–µ–Ω–¥—É —Å {date_from.date()} –ø–æ {date_to.date()}"]

    if date_from.weekday() == 5 and date_to.weekday() == 6 and (date_to - date_from).days == 1:
        return cost_per_weekend, [f"–î–æ–±–∞–≤–ª–µ–Ω–æ {cost_per_weekend} —Ä—É–±. –∑–∞ –∞—Ä–µ–Ω–¥—É —Å —Å—É–±–±–æ—Ç—ã –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {date_from.date()} - {date_to.date()}"]

    total_cost = 0
    cost_details = []
    current_date = date_from

    while current_date <= date_to:
        if (date_to - date_from).total_seconds() / 3600 <= 12:
            hours_diff = (date_to - date_from).total_seconds() / 3600
            total_cost += cost_per_hour * hours_diff
            cost_details.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {cost_per_hour * hours_diff:.2f} —Ä—É–±. –∑–∞ –ø–æ—á–∞—Å–æ–≤—É—é –∞—Ä–µ–Ω–¥—É —Å {date_from} –ø–æ {date_to}")
            break

        day_name = days_of_week[current_date.weekday()]

        if current_date.weekday() < 5:
            total_cost += cost_per_weekday
            cost_details.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {cost_per_weekday} —Ä—É–±. –∑–∞ –±—É–¥–Ω–∏–π –¥–µ–Ω—å {day_name} {current_date.date()}")
        else:
            total_cost += cost_per_weekend_evening
            cost_details.append(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {cost_per_weekend_evening} —Ä—É–±. –∑–∞ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å {day_name} {current_date.date()}")

        current_date += timedelta(days=1)

    return total_cost, cost_details

########################### –î–ê–¢–ê –ì–†–ê–ë–ë–ï–† ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
@dp.callback_query(SimpleCalendarCallback.filter(), StateFilter(OrderSupState.waiting_for_start_date))
async def process_start_date(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É Cancel
    if callback_data.act == "CANCEL":
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="–î–æ–º–æ–π",
            callback_data="choose_sup")
        )
        await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä –¥–∞—Ç—ã.", reply_markup=builder.as_markup(resize_keyboard=True))
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É TODAY
    if callback_data.act == "TODAY":
        today_date = datetime.now()
        start_date_str = today_date.strftime('%d.%m.%Y')
        await state.update_data(start_date=start_date_str)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback_query.message.answer(
            f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date_str}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
        )
        await state.set_state(OrderSupState.waiting_for_end_date)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    selected, date = await SimpleCalendar(locale='ru_RU').process_selection(callback_query, callback_data)

    if selected:
        start_date_str = date.strftime('%d.%m.%Y')
        await state.update_data(start_date=start_date_str)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await callback_query.message.answer(
            f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date_str}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar() # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
        )
        await state.set_state(OrderSupState.waiting_for_end_date)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
@dp.callback_query(SimpleCalendarCallback.filter(), StateFilter(OrderSupState.waiting_for_end_date))
async def process_end_date(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É Cancel
    if callback_data.act == "CANCEL":
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="–î–æ–º–æ–π",
            callback_data="choose_sup")
        )
        await callback_query.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–±–æ—Ä –¥–∞—Ç—ã.", reply_markup=builder.as_markup(resize_keyboard=True))
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É TODAY
    if callback_data.act == "TODAY":
        today_date = datetime.now().date()
        end_date_str = today_date.strftime('%d.%m.%Y')
        user_data = await state.get_data()
        start_date_str = user_data.get('start_date')
        start_date = datetime.strptime(start_date_str, '%d.%m.%Y').date()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –¥–∞—Ç
        if start_date > today_date:
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è ({end_date_str}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ ({start_date_str}).")
            await confirm_no(callback_query, state)
            return

        await state.update_data(end_date=end_date_str)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
        cost, details = calculate_rent_cost(start_date_str, end_date_str)
        await state.update_data(rent_cost=cost, cost_details=details)

        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="confirm_yes"))
        builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_no"))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ö –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback_query.message.answer(
            f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –¥–∞—Ç—É: {start_date_str} - {end_date_str}?</b>\n\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {cost}‚ÇΩ</b>\n–î–µ—Ç–∞–ª–∏:\n"
            + '\n'.join(details),
            reply_markup=builder.as_markup(),
            parse_mode="html"
        )
        await state.set_state(OrderSupState.waiting_for_confirmation)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    selected, date = await SimpleCalendar(locale='ru_RU').process_selection(callback_query, callback_data)

    if selected:
        today_date = datetime.now().date()
        end_date = date.date()
        end_date_str = end_date.strftime('%d.%m.%Y')
        user_data = await state.get_data()
        start_date_str = user_data.get('start_date')
        start_date = datetime.strptime(start_date_str, '%d.%m.%Y').date()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –¥–∞—Ç
        if start_date > end_date:
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è ({end_date_str}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ ({start_date_str}).")
            await confirm_no(callback_query, state)
            return

        if end_date < today_date:
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞: –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è ({end_date_str}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è ({today_date.strftime('%d.%m.%Y')}).")
            await confirm_no(callback_query, state)
            return

        await state.update_data(end_date=end_date_str)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã
        cost, details = calculate_rent_cost(start_date_str, end_date_str)
        await state.update_data(rent_cost=cost, cost_details=details)

        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="–î–∞", callback_data="confirm_yes"))
        builder.add(types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_no"))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç–∞—Ö –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback_query.message.answer(
            f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –¥–∞—Ç—É: {start_date_str} - {end_date_str}?</b>\n\n"
            f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {cost}‚ÇΩ</b>\n–î–µ—Ç–∞–ª–∏:\n"
            + '\n'.join(details),
            reply_markup=builder.as_markup(),
            parse_mode="html"
        )
        await state.set_state(OrderSupState.waiting_for_confirmation)  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±—ç–∫–∞ –¥–ª—è –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞—Ç
@dp.callback_query(lambda c: c.data == "confirm_no", StateFilter(OrderSupState.waiting_for_confirmation))
async def confirm_no(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: ",
        reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
    )
    await state.set_state(OrderSupState.waiting_for_start_date)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –æ–∂–∏–¥–∞–Ω–∏—é –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã


@dp.callback_query(F.data =="confirm_yes", StateFilter(OrderSupState.waiting_for_confirmation))
async def confirm_yes(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    start_date = user_data.get('start_date')
    end_date = user_data.get('end_date')
    rent_cost = user_data.get('rent_cost')

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–û—Ç–º–µ–Ω–∞",
        callback_data="payment_cancel")
    )

    await callback.message.answer(
        f"–î–∞—Ç–∞ {start_date} - {end_date} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {rent_cost}‚ÇΩ\n\n"
        "–û–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä +7 981 743 6822 –°–±–µ—Ä–±–∞–Ω–∫ –∏–ª–∏ –ê–ª—å—Ñ–∞ –±–∞–Ω–∫ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–º–µ–Ω–∞.",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(OrderSupState.waiting_for_payment_screenshot)


@dp.message(OrderSupState.waiting_for_payment_screenshot, F.photo)
async def process_payment_screenshot(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    text = user_data.get('text', '')
    additional_info = user_data.get('additional_info')
    rent_cost = user_data.get('rent_cost')
    cost_details = user_data.get('cost_details', [])
    text += (
    f"\n<b>–î–∞—Ç–∞: {additional_info}</b>\n"
    f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã: {rent_cost}‚ÇΩ</b>\n\n"
    "–î–µ—Ç–∞–ª–∏:\n" + '\n'.join(cost_details))


    photo = message.photo[-1]
    photo_file_id = photo.file_id



    media = [types.InputMediaPhoto(media=photo_file_id)]


    for id_ad in admin_id:
        await message.bot.send_message(id_ad, text)
        await message.bot.send_media_group(id_ad, media=media)
        #await callback.message.answer_media_group(media=media)

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–æ–º–æ–π",
        callback_data="choose_sup")
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=builder.as_markup(resize_keyboard=True))


    #await state.finish()

@dp.callback_query(F.data == "payment_cancel")
async def payment_cancel(callback: types.CallbackQuery, state: FSMContext):

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–æ–º–æ–π",
        callback_data="choose_sup")
    )

    await callback.message.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=builder.as_markup(resize_keyboard=True))



###########################–û–¢–ü–†–ê–í–ò–¢–¨ –ê–î–ú–ò–ù–ê–ú‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ‚Ññ

##########################################SUP BLOCK########################################################################

@dp.callback_query(F.data == "sup_1")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_sups()

    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id=1
    selected_sup = next((sup for sup in sups if sup['id'] == 1), None)

    #await callback.message.answer(f"{selected_sup}")

    if selected_sup:



        price = selected_sup['price']
        price = list(map(int, price.split(", ")))
        price_text = f"üí∏–°–¢–û–ò–ú–û–°–¢–¨ –ê–†–ï–ù–î–´ –í –°–£–¢–ö–ò:üí∏:\n- {price[0]}—Ä—É–± —á–∞—Å\n- {price[1]}—Ä—É–± (–±—É–¥–Ω–∏ –ø–Ω -—á—Ç)\n- {price[2]}—Ä—É–± (–≤—ãxo–¥–Ω—ãe —á—Ç 16:00 - –≤—Å)\n- {price[3]}—Ä—É–± (–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ —Å –≤–µ—á–µ—Ä–∞ –ü–¢ –ø–æ –í–°)\n- {price[4]}—Ä—É–± (–∞—Ä–µ–Ω–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é)üöÄ"

        availability = selected_sup['availability']

        media = [types.InputMediaPhoto(media=selected_sup['url'])]
        await callback.message.answer_media_group(media=media)
        #await callback.message.answer_media_group(media=media)
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ



        if availability == 1:

            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–í –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text

            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç",
                callback_data="choose_color_sup_1")
            )
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        else:

            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )


        await callback.message.answer(f"{sup_text}", reply_markup=builder.as_markup(resize_keyboard=True), parse_mode="html")

    else:
        sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        await callback.message.answer(sup_text, reply_markup=builder.as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "choose_color_sup_1")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:"
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
                text="–°–∏–Ω–∏–π üü¶",
                callback_data="send_admin_sup_1")
    )
    builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
    )
    await callback.message.answer(text, reply_markup=builder.as_markup(resize_keyboard=True))


#########################################################–ú–†–ê–ó–¨ –ö–û–¢–û–†–ê–Ø –û–¢–í–ï–ß–ê–ï–¢ –ó–ê –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê###########################################

# –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
@dp.callback_query(F.data == "send_admin_sup_1")
async def send_admin_sup(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)  # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    user_id = callback.from_user.id
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_user_info()
    selected_sup = next((sup for sup in sups if sup['id'] == user_id), None)

    if selected_sup:
        text = (
            f"–ù–û–í–´–ô –ó–ê–ö–ê–ó\nID - {selected_sup['id']}\n–ò–º—è - {selected_sup['name']}\n"
            f"–°—Å—ã–ª–∫–∞ —Ç–≥ - {selected_sup['link']}\n–ù–æ–º–µ—Ä - {selected_sup['number']}\n\nCOOLSURF –°–∏–Ω–∏–π"
        )

        await state.update_data(text=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(OrderSupState.waiting_for_start_date)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        )
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")



@dp.callback_query(F.data == "sup_2")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_sups()

    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id=1
    selected_sup = next((sup for sup in sups if sup['id'] == 2), None)

    #await callback.message.answer(f"{selected_sup}")

    if selected_sup:
        price = selected_sup['price']
        price = list(map(int, price.split(", ")))
        price_text = f"üí∏–°–¢–û–ò–ú–û–°–¢–¨ –ê–†–ï–ù–î–´ –í –°–£–¢–ö–ò:üí∏:\n- {price[0]}—Ä—É–± —á–∞—Å\n- {price[1]}—Ä—É–± (–±—É–¥–Ω–∏ –ø–Ω -—á—Ç)\n- {price[2]}—Ä—É–± (–≤—ãxo–¥–Ω—ãe —á—Ç 16:00 - –≤—Å)\n- {price[3]}—Ä—É–± (–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ —Å –≤–µ—á–µ—Ä–∞ –ü–¢ –ø–æ –í–°)\n- {price[4]}—Ä—É–± (–∞—Ä–µ–Ω–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é)üöÄ"
        availability = selected_sup['availability']

        media = [types.InputMediaPhoto(media=selected_sup['url'])]
        await callback.message.answer_media_group(media=media)
        #await callback.message.answer_media_group(media=media)
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if availability == 1:
            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–í –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text

            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç",
                callback_data="choose_color_sup_2")
            )
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        else:

            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )

        await callback.message.answer(f"{sup_text}", reply_markup=builder.as_markup(resize_keyboard=True), parse_mode="html")

    else:
        sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        await callback.message.answer(sup_text, reply_markup=builder.as_markup(resize_keyboard=True))



@dp.callback_query(F.data == "choose_color_sup_2")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:"
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
                text="–ö—Ä–∞—Å–Ω—ã–π üü•",
                callback_data="send_admin_sup_2")
    )
    builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
    )
    await callback.message.answer(text, reply_markup=builder.as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "send_admin_sup_2")
async def send_admin_sup(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    user_id = callback.from_user.id
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_user_info()
    selected_sup = next((sup for sup in sups if sup['id'] == user_id), None)

    if selected_sup:
        text = (
            f"–ù–û–í–´–ô –ó–ê–ö–ê–ó\nID - {selected_sup['id']}\n–ò–º—è - {selected_sup['name']}\n"
            f"–°—Å—ã–ª–∫–∞ —Ç–≥ - {selected_sup['link']}\n–ù–æ–º–µ—Ä - {selected_sup['number']}\n\nCOOLSURF –°–∏–Ω–∏–π"
        )

        await state.update_data(text=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(OrderSupState.waiting_for_start_date)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        )
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")


@dp.callback_query(F.data == "sup_3")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_sups()

    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id=1
    selected_sup = next((sup for sup in sups if sup['id'] == 3), None)

    #await callback.message.answer(f"{selected_sup}")

    if selected_sup:
        price = selected_sup['price']
        price = list(map(int, price.split(", ")))
        price_text = f"üí∏–°–¢–û–ò–ú–û–°–¢–¨ –ê–†–ï–ù–î–´ –í –°–£–¢–ö–ò:üí∏:\n- {price[0]}—Ä—É–± —á–∞—Å\n- {price[1]}—Ä—É–± (–±—É–¥–Ω–∏ –ø–Ω -—á—Ç)\n- {price[2]}—Ä—É–± (–≤—ãxo–¥–Ω—ãe —á—Ç 16:00 - –≤—Å)\n- {price[3]}—Ä—É–± (–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ —Å –≤–µ—á–µ—Ä–∞ –ü–¢ –ø–æ –í–°)\n- {price[4]}—Ä—É–± (–∞—Ä–µ–Ω–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é)üöÄ"
        availability = selected_sup['availability']

        media = [types.InputMediaPhoto(media=selected_sup['url'])]
        await callback.message.answer_media_group(media=media)
        #await callback.message.answer_media_group(media=media)
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ



        if availability == 1:
            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–í –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text

            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç",
                callback_data="choose_color_sup_3")
            )
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        else:

            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )


        await callback.message.answer(f"{sup_text}", reply_markup=builder.as_markup(resize_keyboard=True), parse_mode="html")

    else:
        sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        await callback.message.answer(sup_text, reply_markup=builder.as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "choose_color_sup_3")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:"
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
                text="–°–∏–Ω–∏–π üü¶",
                callback_data="send_admin_sup_3_1")
    )
    builder.add(types.InlineKeyboardButton(
                text="–ì–æ–ª—É–±–æ–π ‚èπÔ∏è",
                callback_data="send_admin_sup_3_2")
    )
    builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
    )
    await callback.message.answer(text, reply_markup=builder.as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "send_admin_sup_3_1")
async def send_admin_sup(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    user_id = callback.from_user.id
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_user_info()
    selected_sup = next((sup for sup in sups if sup['id'] == user_id), None)

    if selected_sup:
        text = (
            f"–ù–û–í–´–ô –ó–ê–ö–ê–ó\nID - {selected_sup['id']}\n–ò–º—è - {selected_sup['name']}\n"
            f"–°—Å—ã–ª–∫–∞ —Ç–≥ - {selected_sup['link']}\n–ù–æ–º–µ—Ä - {selected_sup['number']}\n\nCOOLSURF –°–∏–Ω–∏–π"
        )

        await state.update_data(text=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(OrderSupState.waiting_for_start_date)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        )
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")



@dp.callback_query(F.data == "send_admin_sup_3_2")
async def send_admin_sup(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    user_id = callback.from_user.id
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_user_info()
    selected_sup = next((sup for sup in sups if sup['id'] == user_id), None)

    if selected_sup:
        text = (
            f"–ù–û–í–´–ô –ó–ê–ö–ê–ó\nID - {selected_sup['id']}\n–ò–º—è - {selected_sup['name']}\n"
            f"–°—Å—ã–ª–∫–∞ —Ç–≥ - {selected_sup['link']}\n–ù–æ–º–µ—Ä - {selected_sup['number']}\n\nCOOLSURF –°–∏–Ω–∏–π"
        )

        await state.update_data(text=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(OrderSupState.waiting_for_start_date)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        )
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")


@dp.callback_query(F.data == "sup_4")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_sups()

    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id=1
    selected_sup = next((sup for sup in sups if sup['id'] == 4), None)

    #await callback.message.answer(f"{selected_sup}")

    if selected_sup:
        price = selected_sup['price']
        price = list(map(int, price.split(", ")))
        price_text = f"üí∏–°–¢–û–ò–ú–û–°–¢–¨ –ê–†–ï–ù–î–´ –í –°–£–¢–ö–ò:üí∏:\n- {price[0]}—Ä—É–± —á–∞—Å\n- {price[1]}—Ä—É–± (–±—É–¥–Ω–∏ –ø–Ω -—á—Ç)\n- {price[2]}—Ä—É–± (–≤—ãxo–¥–Ω—ãe —á—Ç 16:00 - –≤—Å)\n- {price[3]}—Ä—É–± (–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ —Å –≤–µ—á–µ—Ä–∞ –ü–¢ –ø–æ –í–°)\n- {price[4]}—Ä—É–± (–∞—Ä–µ–Ω–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é)üöÄ"
        availability = selected_sup['availability']

        media = [types.InputMediaPhoto(media=selected_sup['url'])]
        await callback.message.answer_media_group(media=media)
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if availability == 1:
            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–í –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text

            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç",
                callback_data="choose_color_sup_4")
            )
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        else:

            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )


        await callback.message.answer(f"{sup_text}", reply_markup=builder.as_markup(resize_keyboard=True), parse_mode="html")

    else:
        sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        await callback.message.answer(sup_text, reply_markup=builder.as_markup(resize_keyboard=True))

@dp.callback_query(F.data == "choose_color_sup_4")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:"
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
                text="–ó–µ–ª—ë–Ω—ã–π üü©",
                callback_data="send_admin_sup_4")
    )

    builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
    )
    await callback.message.answer(text, reply_markup=builder.as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "send_admin_sup_4")
async def send_admin_sup(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    user_id = callback.from_user.id
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_user_info()
    selected_sup = next((sup for sup in sups if sup['id'] == user_id), None)

    if selected_sup:
        text = (
            f"–ù–û–í–´–ô –ó–ê–ö–ê–ó\nID - {selected_sup['id']}\n–ò–º—è - {selected_sup['name']}\n"
            f"–°—Å—ã–ª–∫–∞ —Ç–≥ - {selected_sup['link']}\n–ù–æ–º–µ—Ä - {selected_sup['number']}\n\nCOOLSURF –°–∏–Ω–∏–π"
        )

        await state.update_data(text=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(OrderSupState.waiting_for_start_date)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        )
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")



@dp.callback_query(F.data == "sup_5")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_sups()

    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id=1
    selected_sup = next((sup for sup in sups if sup['id'] == 5), None)

    #await callback.message.answer(f"{selected_sup}")

    if selected_sup:
        price = selected_sup['price']
        price = list(map(int, price.split(", ")))
        price_text = f"üí∏–°–¢–û–ò–ú–û–°–¢–¨ –ê–†–ï–ù–î–´ –í –°–£–¢–ö–ò:üí∏:\n- {price[0]}—Ä—É–± —á–∞—Å\n- {price[1]}—Ä—É–± (–±—É–¥–Ω–∏ –ø–Ω -—á—Ç)\n- {price[2]}—Ä—É–± (–≤—ãxo–¥–Ω—ãe —á—Ç 16:00 - –≤—Å)\n- {price[3]}—Ä—É–± (–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ —Å –≤–µ—á–µ—Ä–∞ –ü–¢ –ø–æ –í–°)\n- {price[4]}—Ä—É–± (–∞—Ä–µ–Ω–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é)üöÄ"
        availability = selected_sup['availability']

        media = [types.InputMediaPhoto(media=selected_sup['url'])]
        await callback.message.answer_media_group(media=media)
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if availability == 1:
            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–í –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text

            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç",
                callback_data="choose_color_sup_5")
            )
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        else:

            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )


        await callback.message.answer(f"{sup_text}", reply_markup=builder.as_markup(resize_keyboard=True), parse_mode="html")

    else:
        sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        await callback.message.answer(sup_text, reply_markup=builder.as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "choose_color_sup_5")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:"
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
                text="–°–∏–Ω–∏–π üü¶",
                callback_data="send_admin_sup_5_1")
    )
    builder.add(types.InlineKeyboardButton(
                text="–ì–æ–ª—É–±–æ–π ‚èπÔ∏è",
                callback_data="send_admin_sup_5_2")
    )
    builder.add(types.InlineKeyboardButton(
                text="–ö—Ä–∞—Å–Ω—ã–π üü•",
                callback_data="send_admin_sup_5_3")
    )

    builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
    )
    await callback.message.answer(text, reply_markup=builder.as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "send_admin_sup_5_1")
async def send_admin_sup(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    user_id = callback.from_user.id
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_user_info()
    selected_sup = next((sup for sup in sups if sup['id'] == user_id), None)

    if selected_sup:
        text = (
            f"–ù–û–í–´–ô –ó–ê–ö–ê–ó\nID - {selected_sup['id']}\n–ò–º—è - {selected_sup['name']}\n"
            f"–°—Å—ã–ª–∫–∞ —Ç–≥ - {selected_sup['link']}\n–ù–æ–º–µ—Ä - {selected_sup['number']}\n\nCOOLSURF –°–∏–Ω–∏–π"
        )

        await state.update_data(text=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(OrderSupState.waiting_for_start_date)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        )
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")

@dp.callback_query(F.data == "send_admin_sup_5_2")
async def send_admin_sup(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    user_id = callback.from_user.id
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_user_info()
    selected_sup = next((sup for sup in sups if sup['id'] == user_id), None)

    if selected_sup:
        text = (
            f"–ù–û–í–´–ô –ó–ê–ö–ê–ó\nID - {selected_sup['id']}\n–ò–º—è - {selected_sup['name']}\n"
            f"–°—Å—ã–ª–∫–∞ —Ç–≥ - {selected_sup['link']}\n–ù–æ–º–µ—Ä - {selected_sup['number']}\n\nCOOLSURF –°–∏–Ω–∏–π"
        )

        await state.update_data(text=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(OrderSupState.waiting_for_start_date)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        )
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")



@dp.callback_query(F.data == "send_admin_sup_5_3")
async def send_admin_sup(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    user_id = callback.from_user.id
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_user_info()
    selected_sup = next((sup for sup in sups if sup['id'] == user_id), None)

    if selected_sup:
        text = (
            f"–ù–û–í–´–ô –ó–ê–ö–ê–ó\nID - {selected_sup['id']}\n–ò–º—è - {selected_sup['name']}\n"
            f"–°—Å—ã–ª–∫–∞ —Ç–≥ - {selected_sup['link']}\n–ù–æ–º–µ—Ä - {selected_sup['number']}\n\nCOOLSURF –°–∏–Ω–∏–π"
        )

        await state.update_data(text=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(OrderSupState.waiting_for_start_date)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        )
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")




@dp.callback_query(F.data == "sup_6")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_sups()

    # –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å id=1
    selected_sup = next((sup for sup in sups if sup['id'] == 6), None)

    #await callback.message.answer(f"{selected_sup}")

    if selected_sup:
        price = selected_sup['price']
        price = list(map(int, price.split(", ")))
        price_text = f"üí∏–°–¢–û–ò–ú–û–°–¢–¨ –ê–†–ï–ù–î–´ –í –°–£–¢–ö–ò:üí∏:\n- {price[0]}—Ä—É–± —á–∞—Å\n- {price[1]}—Ä—É–± (–±—É–¥–Ω–∏ –ø–Ω -—á—Ç)\n- {price[2]}—Ä—É–± (–≤—ãxo–¥–Ω—ãe —á—Ç 16:00 - –≤—Å)\n- {price[3]}—Ä—É–± (–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ —Å –≤–µ—á–µ—Ä–∞ –ü–¢ –ø–æ –í–°)\n- {price[4]}—Ä—É–± (–∞—Ä–µ–Ω–¥–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é)üöÄ"
        availability = selected_sup['availability']

        media = [types.InputMediaPhoto(media=selected_sup['url'])]
        await callback.message.answer_media_group(media=media)
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if availability == 1:
            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–í –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text

            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç",
                callback_data="choose_color_sup_6")
            )
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        else:

            sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )


        await callback.message.answer(f"{sup_text}", reply_markup=builder.as_markup(resize_keyboard=True), parse_mode="html")

    else:
        sup_text = f"<b>{selected_sup['name']}</b>\n\n–†–∞–∑–º–µ—Ä - {selected_sup['size']}\n<b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n\n" + price_text
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
            )
        await callback.message.answer(sup_text, reply_markup=builder.as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "choose_color_sup_6")
async def choose_sup(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:"
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
                text="–û—Ä–∞–Ω—å–∂–µ–≤—ã–π üüß",
                callback_data="send_admin_sup_6")
    )

    builder.add(types.InlineKeyboardButton(
                text="–ù–∞–∑–∞–¥",
                callback_data="choose_sup")
    )
    await callback.message.answer(text, reply_markup=builder.as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "send_admin_sup_6")
async def send_admin_sup(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_reply_markup(reply_markup=None)
    user_id = callback.from_user.id
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_user_info()
    selected_sup = next((sup for sup in sups if sup['id'] == user_id), None)

    if selected_sup:
        text = (
            f"–ù–û–í–´–ô –ó–ê–ö–ê–ó\nID - {selected_sup['id']}\n–ò–º—è - {selected_sup['name']}\n"
            f"–°—Å—ã–ª–∫–∞ —Ç–≥ - {selected_sup['link']}\n–ù–æ–º–µ—Ä - {selected_sup['number']}\n\nCOOLSURF –°–∏–Ω–∏–π"
        )

        await state.update_data(text=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(OrderSupState.waiting_for_start_date)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        await callback.message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: ",
            reply_markup=await SimpleCalendar(locale='ru_RU').start_calendar()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã
        )
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.")

##########################################END SUP BLOCK########################################################################
'''
class SUPCallbackData(CallbackData, prefix="sup_"):
    id: int

@dp.callback_query(SUPCallbackData.filter())
async def send_homework(callback: types.CallbackQuery, callback_data: SUPCallbackData):
    await callback.message.edit_reply_markup(reply_markup=None)

    sup_id = callback_data.id

    excel_manager = ExcelManager("your_file_name.xlsx")
    mark = excel_manager.get_sups()

    selected_sup = next((item for item in mark if item['id'] == sup_id), None)

    if selected_sup:
        await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ SUP: {selected_sup['name']}")
    else:
        await callback.message.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–π SUP –Ω–µ –Ω–∞–π–¥–µ–Ω")
'''





@dp.callback_query(F.data == "zapisi_lekcii")
async def send_random_value(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    excel_manager = ExcelManager(file_name)
    urls = excel_manager.lektsionnie_url()
    msg = "–õ–µ–∫—Ü–∏–∏\n"
    print(f"{callback.from_user.full_name} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Å–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π")
    #ids = excel_manager.get_all_ids()
    #print(ids)
    #for user_id in ids:
    #    await callback.bot.send_message(user_id, "–õ–µ–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞(–î–∑ –∫—Å—Ç–∞ —Ç–æ–∂–µ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ)")
    #await callback.bot.send_message(541020016, "–•—É–π")
    await callback.message.answer(f"{msg}{urls}", reply_markup=build_keyboard().as_markup(resize_keyboard=True))


@dp.callback_query(F.data == "homework")
async def send_homework(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    msg = "–î–∑\n"

    print(f"{callback.from_user.full_name} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –¥–∑")
    await callback.message.answer(f"{msg}–ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–æ, —á—Ç–æ —è –Ω–∞–ø–∏—Å–∞–ª –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ(p.s. –∫–æ–º—É —Å–∏–ª—å–Ω–æ –ª–µ–Ω—å - –∫–∏–Ω—É –≤ –Ω–∞—á–∞–ª–µ —Å–ª–µ–¥ –ø–∞—Ä—ã, –Ω–æ —ç—Ç–æ -rep)", reply_markup=build_keyboard().as_markup(resize_keyboard=True))

@dp.callback_query(F.data == "timetable")
async def send_homework(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    dates = ["07.04;18:00", "14.04;18:00"]
    formatted_message = format_schedule(dates)

    print(f"{callback.from_user.full_name} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    msg = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
    await callback.message.answer(f"{msg}{formatted_message}", reply_markup=build_keyboard().as_markup(resize_keyboard=True))

@dp.callback_query(F.data == "files")
async def send_materials(callback: types.CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)

    print(f"{callback.from_user.full_name} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    msg = "–ú–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
    await callback.message.answer(f"{msg}–°—é–¥–∞ –∑–∞–ª—å—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –∫–Ω–∏–∂–∫–∏ –∏ —Ç.–¥.", reply_markup=build_keyboard().as_markup(resize_keyboard=True))

@dp.callback_query(F.data == "mark")
async def update_poseshuaemost(callback: types.CallbackQuery):  #–≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é
    excel_manager = ExcelManager(file_name)
    mark = excel_manager.check_and_update_attendance(callback.from_user.id)
    print("mark = ", mark)
    if mark == 2:
        await callback.answer(
        text="–£–∂–µ –æ—Ç–º–µ—Ç–∏–ª—Å—è",
        show_alert=True
        )
    elif mark == 1:
        await callback.answer(
        text="–û—Ç–º–µ—Ç–∏–ª—Å—è",
        show_alert=True
        )
    elif mark == 0:
        await callback.answer(
        text="–æ—à–∏–±–∫–∞ id –∏–ª–∏ exel",
        show_alert=True
        )
    elif mark == 3:
        await callback.answer(
        text="–û—Ç–º–µ—á–∞—Ç—Å—è –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—ã",
        show_alert=True
        )


@dp.message(Command('home'))#commands=['addLectureUrl'])
async def add_lecture_url(message: types.Message, command: CommandObject) -> None:

    user_id = message.from_user.id
    excel_manager = ExcelManager(file_name)
    sups = excel_manager.get_user_info()
    selected_sup = next((sup for sup in sups if sup['id'] == user_id), None)

    if selected_sup:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="–í—ã–±—Ä–∞—Ç—å SUP",
            callback_data="choose_sup")
        )

        await message.answer(f"–î–æ–º–æ–π", reply_markup=builder.as_markup(resize_keyboard=True))

    else:
        await command_start_handler(message)


@dp.message(Command('start'))#commands=['addLectureUrl'])
async def add_lecture_url(message: types.Message, command: CommandObject) -> None:
    await command_start_handler(message)


@dp.message(Command('spam'))#commands=['addLectureUrl'])
async def add_lecture_url(message: types.Message, command: CommandObject) -> None:
    if message.from_user.id in admin_id:
        command_text = command.args
        if not command_text:
            await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            return
        msg = command_text.strip()
        excel_manager = ExcelManager(file_name)
        #msg = "–õ–µ–∫—Ü–∏–∏\n"
        ids = excel_manager.get_all_ids()
        print(ids, msg)

        #user_id = 541020016
        #await message.bot.send_message(user_id, msg)
        for user_id in ids:
            try:
                await message.bot.send_message(user_id, msg)
            except:
                for admin in admin_id:
                    try:
                        await message.bot.send_message(admin, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}\n tg://user?id={user_id}")
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}: {e}")
                #await message.bot.send_message(541020016, f"–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–ø–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {user_id}")
        #link = command_text.strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
        #excel_manager = ExcelManager(file_name)
        #excel_manager.lektsionnie_url(link)
        #await message.answer(f"–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É: {link}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")



@dp.message()
async def handle_message(message: types.Message) -> None:
    if message.text == '1':
        photo_path = "12.jpg"
        await message.answer_photo(FSInputFile(photo_path))



async def main() -> None:
    session = AiohttpSession(proxy='http://proxy.server:3128')
    bot = Bot(token='6606236242:AAFj4FaySsTXxbHXgqHmQD6iSrFfNORdhkE', session=session)
    #bot = Bot('6606236242:AAEv2NK18R07gUnqk1O_hOJubvP-25YMSmI', default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await set_default_commands(bot)
    await dp.start_polling(bot)
    #register_handlers(dp)
#async def main() -> None:
#    bot = Bot('6606236242:AAFlHP2zlHhs956QKruEWHvouVO5aGSngdc', default=DefaultBotProperties(parse_mode=ParseMode.HTML))
#    await set_default_commands(bot)
#    await dp.start_polling(bot)
#    register_handlers(dp)


def strip_html_tags(text):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è HTML —Ç–µ–≥–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏."""
    clean = re.compile('<.*?>')
    return re.sub(clean, '', text)


def format_schedule(dates):
    # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    max_date_length = max(len(date_time.split(";")[0]) for date_time in dates)
    max_time_length = max(len(date_time.split(";")[1]) for date_time in dates)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    header = "–î–∞—Ç–∞".ljust(max_date_length + 4)
    time_row = "–í—Ä–µ–º—è".ljust(max_time_length + 2)
    for date_time in dates:
        date, time = date_time.split(";")
        header += date.ljust(max_date_length + 2)
        time_row += time.ljust(max_time_length + 2)

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    separator = "-" * (len(header) + 10)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = header + "\n" + separator + "\n"+ time_row
    return message



def build_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="–õ–µ–∫—Ü–∏–∏", callback_data="zapisi_lekcii"),
        types.InlineKeyboardButton(text="–î–∑", callback_data="homework")
    )
    builder.row(
        types.InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="timetable"),

    )
    builder.row(
        types.InlineKeyboardButton(text="–í—Å—è–∫–æ–µ –ø–æ–ª–µ–∑–Ω–æ–µ", callback_data="files"),
        types.InlineKeyboardButton(text="–Ø –Ω–∞ –ø–∞—Ä–µ", callback_data="mark")
    )
    #builder.as_markup(resize_keyboard=True)
    return builder



if __name__ == "__main__":
    #logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())